
/*
 *  maximilian.cpp
 *  platform independent synthesis library using portaudio or rtaudio
 *
 *  Created by Mick Grierson on 29/12/2009.
 *  Copyright 2009 Mick Grierson & Strangeloop Limited. All rights reserved.
 *	Thanks to the Goldsmiths Creative Computing Team.
 *	Special thanks to Arturo Castro for the PortAudio implementation.
 *
 *	Permission is hereby granted, free of charge, to any person
 *	obtaining a copy of this software and associated documentation
 *	files (the "Software"), to deal in the Software without
 *	restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the
 *	Software is furnished to do so, subject to the following
 *	conditions:
 *	
 *	The above copyright notice and this permission notice shall be
 *	included in all copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	
 *	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *	OTHER DEALINGS IN THE SOFTWARE.
 *
 */
/*
 ==============================================================================
 Edit by:  Richard Yang
 ==============================================================================
 */
#include "maximilian.h"
#include "math.h"
#include "prerender.h"
////include for file reading
//#include <iostream>
//#include <fstream>
//#include <string>
#include <map>

//This used to be important for dealing with multichannel playback
float chandiv= 1;

int maxiSettings::sampleRate = 44100;
int maxiSettings::channels = 2;
int maxiSettings::bufferSize = 1024;


//this is a 514-point sinewave table that has many uses. 
double sineBuffer[514]={0,0.012268,0.024536,0.036804,0.049042,0.06131,0.073547,0.085785,0.097992,0.1102,0.12241,0.13455,0.1467,0.15884,0.17093,0.18301,0.19507,0.20709,0.21909,0.23105,0.24295,0.25485,0.26669,0.2785,0.29025,0.30197,0.31366,0.32529,0.33685,0.34839,0.35986,0.37128,0.38266,0.39395,0.40521,0.41641,0.42752,0.4386,0.44958,0.46051,0.47137,0.48215,0.49286,0.50351,0.51407,0.52457,0.53497,0.54529,0.55554,0.5657,0.57578,0.58575,0.59567,0.60547,0.6152,0.62482,0.63437,0.6438,0.65314,0.66238,0.67151,0.68057,0.68951,0.69833,0.70706,0.7157,0.72421,0.7326,0.74091,0.74908,0.75717,0.76514,0.77298,0.7807,0.7883,0.79581,0.80316,0.81042,0.81754,0.82455,0.83142,0.8382,0.84482,0.85132,0.8577,0.86392,0.87006,0.87604,0.88187,0.8876,0.89319,0.89862,0.90396,0.90912,0.91415,0.91907,0.92383,0.92847,0.93295,0.93729,0.9415,0.94556,0.94949,0.95325,0.95691,0.96039,0.96375,0.96692,0.97,0.9729,0.97565,0.97827,0.98074,0.98306,0.98523,0.98724,0.98914,0.99084,0.99243,0.99387,0.99515,0.99628,0.99725,0.99808,0.99875,0.99927,0.99966,0.99988,0.99997,0.99988,0.99966,0.99927,0.99875,0.99808,0.99725,0.99628,0.99515,0.99387,0.99243,0.99084,0.98914,0.98724,0.98523,0.98306,0.98074,0.97827,0.97565,0.9729,0.97,0.96692,0.96375,0.96039,0.95691,0.95325,0.94949,0.94556,0.9415,0.93729,0.93295,0.92847,0.92383,0.91907,0.91415,0.90912,0.90396,0.89862,0.89319,0.8876,0.88187,0.87604,0.87006,0.86392,0.8577,0.85132,0.84482,0.8382,0.83142,0.82455,0.81754,0.81042,0.80316,0.79581,0.7883,0.7807,0.77298,0.76514,0.75717,0.74908,0.74091,0.7326,0.72421,0.7157,0.70706,0.69833,0.68951,0.68057,0.67151,0.66238,0.65314,0.6438,0.63437,0.62482,0.6152,0.60547,0.59567,0.58575,0.57578,0.5657,0.55554,0.54529,0.53497,0.52457,0.51407,0.50351,0.49286,0.48215,0.47137,0.46051,0.44958,0.4386,0.42752,0.41641,0.40521,0.39395,0.38266,0.37128,0.35986,0.34839,0.33685,0.32529,0.31366,0.30197,0.29025,0.2785,0.26669,0.25485,0.24295,0.23105,0.21909,0.20709,0.19507,0.18301,0.17093,0.15884,0.1467,0.13455,0.12241,0.1102,0.097992,0.085785,0.073547,0.06131,0.049042,0.036804,0.024536,0.012268,0,-0.012268,-0.024536,-0.036804,-0.049042,-0.06131,-0.073547,-0.085785,-0.097992,-0.1102,-0.12241,-0.13455,-0.1467,-0.15884,-0.17093,-0.18301,-0.19507,-0.20709,-0.21909,-0.23105,-0.24295,-0.25485,-0.26669,-0.2785,-0.29025,-0.30197,-0.31366,-0.32529,-0.33685,-0.34839,-0.35986,-0.37128,-0.38266,-0.39395,-0.40521,-0.41641,-0.42752,-0.4386,-0.44958,-0.46051,-0.47137,-0.48215,-0.49286,-0.50351,-0.51407,-0.52457,-0.53497,-0.54529,-0.55554,-0.5657,-0.57578,-0.58575,-0.59567,-0.60547,-0.6152,-0.62482,-0.63437,-0.6438,-0.65314,-0.66238,-0.67151,-0.68057,-0.68951,-0.69833,-0.70706,-0.7157,-0.72421,-0.7326,-0.74091,-0.74908,-0.75717,-0.76514,-0.77298,-0.7807,-0.7883,-0.79581,-0.80316,-0.81042,-0.81754,-0.82455,-0.83142,-0.8382,-0.84482,-0.85132,-0.8577,-0.86392,-0.87006,-0.87604,-0.88187,-0.8876,-0.89319,-0.89862,-0.90396,-0.90912,-0.91415,-0.91907,-0.92383,-0.92847,-0.93295,-0.93729,-0.9415,-0.94556,-0.94949,-0.95325,-0.95691,-0.96039,-0.96375,-0.96692,-0.97,-0.9729,-0.97565,-0.97827,-0.98074,-0.98306,-0.98523,-0.98724,-0.98914,-0.99084,-0.99243,-0.99387,-0.99515,-0.99628,-0.99725,-0.99808,-0.99875,-0.99927,-0.99966,-0.99988,-0.99997,-0.99988,-0.99966,-0.99927,-0.99875,-0.99808,-0.99725,-0.99628,-0.99515,-0.99387,-0.99243,-0.99084,-0.98914,-0.98724,-0.98523,-0.98306,-0.98074,-0.97827,-0.97565,-0.9729,-0.97,-0.96692,-0.96375,-0.96039,-0.95691,-0.95325,-0.94949,-0.94556,-0.9415,-0.93729,-0.93295,-0.92847,-0.92383,-0.91907,-0.91415,-0.90912,-0.90396,-0.89862,-0.89319,-0.8876,-0.88187,-0.87604,-0.87006,-0.86392,-0.8577,-0.85132,-0.84482,-0.8382,-0.83142,-0.82455,-0.81754,-0.81042,-0.80316,-0.79581,-0.7883,-0.7807,-0.77298,-0.76514,-0.75717,-0.74908,-0.74091,-0.7326,-0.72421,-0.7157,-0.70706,-0.69833,-0.68951,-0.68057,-0.67151,-0.66238,-0.65314,-0.6438,-0.63437,-0.62482,-0.6152,-0.60547,-0.59567,-0.58575,-0.57578,-0.5657,-0.55554,-0.54529,-0.53497,-0.52457,-0.51407,-0.50351,-0.49286,-0.48215,-0.47137,-0.46051,-0.44958,-0.4386,-0.42752,-0.41641,-0.40521,-0.39395,-0.38266,-0.37128,-0.35986,-0.34839,-0.33685,-0.32529,-0.31366,-0.30197,-0.29025,-0.2785,-0.26669,-0.25485,-0.24295,-0.23105,-0.21909,-0.20709,-0.19507,-0.18301,-0.17093,-0.15884,-0.1467,-0.13455,-0.12241,-0.1102,-0.097992,-0.085785,-0.073547,-0.06131,-0.049042,-0.036804,-0.024536,-0.012268,0,0.012268
};
double sawBuffer[514]={0,-1.00000,-0.99609,-0.99217,-0.98826,-0.98434,-0.98043,-0.97652,-0.97260,-0.96869,-0.96477,-0.96086,-0.95695,-0.95303,-0.94912,-0.94521,-0.94129,-0.93738,-0.93346,-0.92955,-0.92564,-0.92172,-0.91781,-0.91389,-0.90998,-0.90607,-0.90215,-0.89824,-0.89432,-0.89041,-0.88650,-0.88258,-0.87867,-0.87476,-0.87084,-0.86693,-0.86301,-0.85910,-0.85519,-0.85127,-0.84736,-0.84344,-0.83953,-0.83562,-0.83170,-0.82779,-0.82387,-0.81996,-0.81605,-0.81213,-0.80822,-0.80431,-0.80039,-0.79648,-0.79256,-0.78865,-0.78474,-0.78082,-0.77691,-0.77299,-0.76908,-0.76517,-0.76125,-0.75734,-0.75342,-0.74951,-0.74560,-0.74168,-0.73777,-0.73386,-0.72994,-0.72603,-0.72211,-0.71820,-0.71429,-0.71037,-0.70646,-0.70254,-0.69863,-0.69472,-0.69080,-0.68689,-0.68297,-0.67906,-0.67515,-0.67123,-0.66732,-0.66341,-0.65949,-0.65558,-0.65166,-0.64775,-0.64384,-0.63992,-0.63601,-0.63209,-0.62818,-0.62427,-0.62035,-0.61644,-0.61252,-0.60861,-0.60470,-0.60078,-0.59687,-0.59295,-0.58904,-0.58513,-0.58121,-0.57730,-0.57339,-0.56947,-0.56556,-0.56164,-0.55773,-0.55382,-0.54990,-0.54599,-0.54207,-0.53816,-0.53425,-0.53033,-0.52642,-0.52250,-0.51859,-0.51468,-0.51076,-0.50685,-0.50294,-0.49902,-0.49511,-0.49119,-0.48728,-0.48337,-0.47945,-0.47554,-0.47162,-0.46771,-0.46380,-0.45988,-0.45597,-0.45205,-0.44814,-0.44423,-0.44031,-0.43640,-0.43249,-0.42857,-0.42466,-0.42074,-0.41683,-0.41292,-0.40900,-0.40509,-0.40117,-0.39726,-0.39335,-0.38943,-0.38552,-0.38160,-0.37769,-0.37378,-0.36986,-0.36595,-0.36204,-0.35812,-0.35421,-0.35029,-0.34638,-0.34247,-0.33855,-0.33464,-0.33072,-0.32681,-0.32290,-0.31898,-0.31507,-0.31115,-0.30724,-0.30333,-0.29941,-0.29550,-0.29159,-0.28767,-0.28376,-0.27984,-0.27593,-0.27202,-0.26810,-0.26419,-0.26027,-0.25636,-0.25245,-0.24853,-0.24462,-0.24070,-0.23679,-0.23288,-0.22896,-0.22505,-0.22114,-0.21722,-0.21331,-0.20939,-0.20548,-0.20157,-0.19765,-0.19374,-0.18982,-0.18591,-0.18200,-0.17808,-0.17417,-0.17025,-0.16634,-0.16243,-0.15851,-0.15460,-0.15068,-0.14677,-0.14286,-0.13894,-0.13503,-0.13112,-0.12720,-0.12329,-0.11937,-0.11546,-0.11155,-0.10763,-0.10372,-0.09980,-0.09589,-0.09198,-0.08806,-0.08415,-0.08023,-0.07632,-0.07241,-0.06849,-0.06458,-0.06067,-0.05675,-0.05284,-0.04892,-0.04501,-0.04110,-0.03718,-0.03327,-0.02935,-0.02544,-0.02153,-0.01761,-0.01370,-0.00978,-0.00587,-0.00196,0.00196,0.00587,0.00978,0.01370,0.01761,0.02153,0.02544,0.02935,0.03327,0.03718,0.04110,0.04501,0.04892,0.05284,0.05675,0.06067,0.06458,0.06849,0.07241,0.07632,0.08023,0.08415,0.08806,0.09198,0.09589,0.09980,0.10372,0.10763,0.11155,0.11546,0.11937,0.12329,0.12720,0.13112,0.13503,0.13894,0.14286,0.14677,0.15068,0.15460,0.15851,0.16243,0.16634,0.17025,0.17417,0.17808,0.18200,0.18591,0.18982,0.19374,0.19765,0.20157,0.20548,0.20939,0.21331,0.21722,0.22114,0.22505,0.22896,0.23288,0.23679,0.24070,0.24462,0.24853,0.25245,0.25636,0.26027,0.26419,0.26810,0.27202,0.27593,0.27984,0.28376,0.28767,0.29159,0.29550,0.29941,0.30333,0.30724,0.31115,0.31507,0.31898,0.32290,0.32681,0.33072,0.33464,0.33855,0.34247,0.34638,0.35029,0.35421,0.35812,0.36204,0.36595,0.36986,0.37378,0.37769,0.38160,0.38552,0.38943,0.39335,0.39726,0.40117,0.40509,0.40900,0.41292,0.41683,0.42074,0.42466,0.42857,0.43249,0.43640,0.44031,0.44423,0.44814,0.45205,0.45597,0.45988,0.46380,0.46771,0.47162,0.47554,0.47945,0.48337,0.48728,0.49119,0.49511,0.49902,0.50294,0.50685,0.51076,0.51468,0.51859,0.52250,0.52642,0.53033,0.53425,0.53816,0.54207,0.54599,0.54990,0.55382,0.55773,0.56164,0.56556,0.56947,0.57339,0.57730,0.58121,0.58513,0.58904,0.59295,0.59687,0.60078,0.60470,0.60861,0.61252,0.61644,0.62035,0.62427,0.62818,0.63209,0.63601,0.63992,0.64384,0.64775,0.65166,0.65558,0.65949,0.66341,0.66732,0.67123,0.67515,0.67906,0.68297,0.68689,0.69080,0.69472,0.69863,0.70254,0.70646,0.71037,0.71429,0.71820,0.72211,0.72603,0.72994,0.73386,0.73777,0.74168,0.74560,0.74951,0.75342,0.75734,0.76125,0.76517,0.76908,0.77299,0.77691,0.78082,0.78474,0.78865,0.79256,0.79648,0.80039,0.80431,0.80822,0.81213,0.81605,0.81996,0.82387,0.82779,0.83170,0.83562,0.83953,0.84344,0.84736,0.85127,0.85519,0.85910,0.86301,0.86693,0.87084,0.87476,0.87867,0.88258,0.88650,0.89041,0.89432,0.89824,0.90215,0.90607,0.90998,0.91389,0.91781,0.92172,0.92564,0.92955,0.93346,0.93738,0.94129,0.94521,0.94912,0.95303,0.95695,0.96086,0.96477,0.96869,0.97260,0.97652,0.98043,0.98434,0.98826,0.99217,0.99609,-1.00000,0
};
double triBuffer[514]={0,-1.00000,-0.99217,-0.98434,-0.97652,-0.96869,-0.96086,-0.95303,-0.94521,-0.93738,-0.92955,-0.92172,-0.91389,-0.90607,-0.89824,-0.89041,-0.88258,-0.87476,-0.86693,-0.85910,-0.85127,-0.84344,-0.83562,-0.82779,-0.81996,-0.81213,-0.80431,-0.79648,-0.78865,-0.78082,-0.77299,-0.76517,-0.75734,-0.74951,-0.74168,-0.73386,-0.72603,-0.71820,-0.71037,-0.70254,-0.69472,-0.68689,-0.67906,-0.67123,-0.66341,-0.65558,-0.64775,-0.63992,-0.63209,-0.62427,-0.61644,-0.60861,-0.60078,-0.59295,-0.58513,-0.57730,-0.56947,-0.56164,-0.55382,-0.54599,-0.53816,-0.53033,-0.52250,-0.51468,-0.50685,-0.49902,-0.49119,-0.48337,-0.47554,-0.46771,-0.45988,-0.45205,-0.44423,-0.43640,-0.42857,-0.42074,-0.41292,-0.40509,-0.39726,-0.38943,-0.38160,-0.37378,-0.36595,-0.35812,-0.35029,-0.34247,-0.33464,-0.32681,-0.31898,-0.31115,-0.30333,-0.29550,-0.28767,-0.27984,-0.27202,-0.26419,-0.25636,-0.24853,-0.24070,-0.23288,-0.22505,-0.21722,-0.20939,-0.20157,-0.19374,-0.18591,-0.17808,-0.17025,-0.16243,-0.15460,-0.14677,-0.13894,-0.13112,-0.12329,-0.11546,-0.10763,-0.09980,-0.09198,-0.08415,-0.07632,-0.06849,-0.06067,-0.05284,-0.04501,-0.03718,-0.02935,-0.02153,-0.01370,-0.00587,0.00196,0.00978,0.01761,0.02544,0.03327,0.04110,0.04892,0.05675,0.06458,0.07241,0.08023,0.08806,0.09589,0.10372,0.11155,0.11937,0.12720,0.13503,0.14286,0.15068,0.15851,0.16634,0.17417,0.18200,0.18982,0.19765,0.20548,0.21331,0.22114,0.22896,0.23679,0.24462,0.25245,0.26027,0.26810,0.27593,0.28376,0.29159,0.29941,0.30724,0.31507,0.32290,0.33072,0.33855,0.34638,0.35421,0.36204,0.36986,0.37769,0.38552,0.39335,0.40117,0.40900,0.41683,0.42466,0.43249,0.44031,0.44814,0.45597,0.46380,0.47162,0.47945,0.48728,0.49511,0.50294,0.51076,0.51859,0.52642,0.53425,0.54207,0.54990,0.55773,0.56556,0.57339,0.58121,0.58904,0.59687,0.60470,0.61252,0.62035,0.62818,0.63601,0.64384,0.65166,0.65949,0.66732,0.67515,0.68297,0.69080,0.69863,0.70646,0.71429,0.72211,0.72994,0.73777,0.74560,0.75342,0.76125,0.76908,0.77691,0.78474,0.79256,0.80039,0.80822,0.81605,0.82387,0.83170,0.83953,0.84736,0.85519,0.86301,0.87084,0.87867,0.88650,0.89432,0.90215,0.90998,0.91781,0.92564,0.93346,0.94129,0.94912,0.95695,0.96477,0.97260,0.98043,0.98826,0.99609,0.99609,0.98826,0.98043,0.97260,0.96477,0.95695,0.94912,0.94129,0.93346,0.92564,0.91781,0.90998,0.90215,0.89432,0.88650,0.87867,0.87084,0.86301,0.85519,0.84736,0.83953,0.83170,0.82387,0.81605,0.80822,0.80039,0.79256,0.78474,0.77691,0.76908,0.76125,0.75342,0.74560,0.73777,0.72994,0.72211,0.71429,0.70646,0.69863,0.69080,0.68297,0.67515,0.66732,0.65949,0.65166,0.64384,0.63601,0.62818,0.62035,0.61252,0.60470,0.59687,0.58904,0.58121,0.57339,0.56556,0.55773,0.54990,0.54207,0.53425,0.52642,0.51859,0.51076,0.50294,0.49511,0.48728,0.47945,0.47162,0.46380,0.45597,0.44814,0.44031,0.43249,0.42466,0.41683,0.40900,0.40117,0.39335,0.38552,0.37769,0.36986,0.36204,0.35421,0.34638,0.33855,0.33072,0.32290,0.31507,0.30724,0.29941,0.29159,0.28376,0.27593,0.26810,0.26027,0.25245,0.24462,0.23679,0.22896,0.22114,0.21331,0.20548,0.19765,0.18982,0.18200,0.17417,0.16634,0.15851,0.15068,0.14286,0.13503,0.12720,0.11937,0.11155,0.10372,0.09589,0.08806,0.08023,0.07241,0.06458,0.05675,0.04892,0.04110,0.03327,0.02544,0.01761,0.00978,0.00196,-0.00587,-0.01370,-0.02153,-0.02935,-0.03718,-0.04501,-0.05284,-0.06067,-0.06849,-0.07632,-0.08415,-0.09198,-0.09980,-0.10763,-0.11546,-0.12329,-0.13112,-0.13894,-0.14677,-0.15460,-0.16243,-0.17025,-0.17808,-0.18591,-0.19374,-0.20157,-0.20939,-0.21722,-0.22505,-0.23288,-0.24070,-0.24853,-0.25636,-0.26419,-0.27202,-0.27984,-0.28767,-0.29550,-0.30333,-0.31115,-0.31898,-0.32681,-0.33464,-0.34247,-0.35029,-0.35812,-0.36595,-0.37378,-0.38160,-0.38943,-0.39726,-0.40509,-0.41292,-0.42074,-0.42857,-0.43640,-0.44423,-0.45205,-0.45988,-0.46771,-0.47554,-0.48337,-0.49119,-0.49902,-0.50685,-0.51468,-0.52250,-0.53033,-0.53816,-0.54599,-0.55382,-0.56164,-0.56947,-0.57730,-0.58513,-0.59295,-0.60078,-0.60861,-0.61644,-0.62427,-0.63209,-0.63992,-0.64775,-0.65558,-0.66341,-0.67123,-0.67906,-0.68689,-0.69472,-0.70254,-0.71037,-0.71820,-0.72603,-0.73386,-0.74168,-0.74951,-0.75734,-0.76517,-0.77299,-0.78082,-0.78865,-0.79648,-0.80431,-0.81213,-0.81996,-0.82779,-0.83562,-0.84344,-0.85127,-0.85910,-0.86693,-0.87476,-0.88258,-0.89041,-0.89824,-0.90607,-0.91389,-0.92172,-0.92955,-0.93738,-0.94521,-0.95303,-0.96086,-0.96869,-0.97652,-0.98434,-0.99217,-1.00000,0
};
//instantiate a 514-point wavebet buffer
double wavenetBuffer[514];

void setup();//use this to do any initialisation if you want.

void play(double *channels);//run dac! 

maxiOsc::maxiOsc(){
    //When you create an oscillator, the constructor sets the phase of the oscillator to 0.
	phase = 0.0;
}

double maxiOsc::noise() {
    //White Noise
	//always the same unless you seed it.
	float r = rand()/(float)RAND_MAX;
	output=r*2-1;
	return(output);
}

void maxiOsc::phaseReset(double phaseIn) {
    //This allows you to set the phase of the oscillator to anything you like.
	phase=phaseIn;
	
}

double maxiOsc::sinewave(double frequency) {
    //This is a sinewave oscillator
	output=sin (phase*(TWOPI));
	if ( phase >= 1.0 ) phase -= 1.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	return(output);
	
}


//==============================================================================
void maxiOsc::interpolationRead(float interpolation, int mode, bool reverse, bool smooth) {
    if ((int)interpolation != prevInterpolation || mode != prevMode || smooth != prevSmooth){
        prevInterpolation = (int)interpolation;
        prevMode = mode;
        prevSmooth = smooth;
        string filefolder;
        string filename;
        int index = 0;
        //according to the selected wave combination, select the corresponding index: SawSin:0-100, SinTri:101-201, TriSaw" 202-302;
        if ((mode == 0) || (mode == 4))
        {
            //filefolder = "SinTri";
            index = 101;
            if (mode == 0)
            {
                interpolation = 0;
            }
            else
            {
                if (reverse)
                {
                    interpolation = 100-interpolation;
                }
            }
        }
        else if ((mode == 1) || (mode == 3))
        {
            //filefolder = "SawSin";
            index = 0;
            if (mode == 1)
            {
                interpolation = 0;
            }
            else
            {
                if (reverse)
                {
                    interpolation = 100-interpolation;
                }
            }
        }
        else if ((mode == 2) || (mode == 5))
        {
            //filefolder = "TriSaw";
            index = 202;
            if (mode == 2)
            {
                interpolation = 0;
            }
            else
            {
                if (reverse)
                {
                    interpolation = 100-interpolation;
                }
            }
        }
        //according to the selected interpolation, select the corresponding prerendered file
        wavenetBuffer[0] = 0;
        for (int i =0; i<512 ; i++)
        {
            
            wavenetBuffer[i+1] = prerenderWabetable[index+ (int)interpolation][i];
        }
        wavenetBuffer[513] = 0;
        double sum = 0.0;
        double mean = 0.0;
        for (int i = 1; i < 513; i++)
        {
            sum += wavenetBuffer[i];
        }
        mean = (sum)/512;
        
        for (int i = 1; i < 513; i++)
        {
            wavenetBuffer[i] = wavenetBuffer[i]-mean;
        }
        //smooth method: ramp the first/final 32 sample of the wavetable from 1 to sample 33/480 by using sin(pi/2).
        if (smooth)
        {
            for (int i =1; i<33; i++)
            {
                wavenetBuffer[i] = wavenetBuffer[33] * (-sineBuffer[i*8+128]+1)/2;
                wavenetBuffer[514-i] = wavenetBuffer[512-33] * (-sineBuffer[i*8+128]+1)/2;
            }
        }
    }
    
}

double maxiOsc::wavenetbuf(double frequency) {
    //This is a wavenet wavetable oscillator that uses 4 point interpolation on a 514 point buffer
    //This is a wavenet wavetable oscillator that uses linear interpolation on a 514 point buffer
    double remainder;
    phase += 512./(maxiSettings::sampleRate/(frequency*chandiv));
    if ( phase >= 511 ) phase -=512;
    remainder = phase - floor(phase);
    output = (double) ((1-remainder) * wavenetBuffer[1+ (long) phase] + remainder * wavenetBuffer[2+(long) phase]);
    return(output);
    
    
}


//==============================================================================

double maxiOsc::sinebuf(double frequency) { //specify the frequency of the oscillator in Hz / cps etc.
    //This is a sinewave oscillator that uses linear interpolation on a 514 point buffer
	double remainder;
 	phase += 512./(maxiSettings::sampleRate/(frequency*chandiv));
	if ( phase >= 511 ) phase -=512;
	remainder = phase - floor(phase);
	output = (double) ((1-remainder) * sineBuffer[1+ (long) phase] + remainder * sineBuffer[2+(long) phase]);
	return(output);
}

double maxiOsc::coswave(double frequency) {
    //This is a cosine oscillator
	output=cos (phase*(TWOPI));
	if ( phase >= 1.0 ) phase -= 1.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	return(output);
	
}

double maxiOsc::phasor(double frequency) {
    //This produces a floating point linear ramp between 0 and 1 at the desired frequency 
	output=phase;
	if ( phase >= 1.0 ) phase -= 1.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	return(output);
} 

double maxiOsc::square(double frequency) {
    //This is a square wave
	if (phase<0.5) output=-1;
	if (phase>0.5) output=1;
	if ( phase >= 1.0 ) phase -= 1.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	return(output);
}

double maxiOsc::pulse(double frequency, double duty) {
    //This is a pulse generator that creates a signal between -1 and 1.
	if (duty<0.) duty=0;
	if (duty>1.) duty=1;
	if ( phase >= 1.0 ) phase -= 1.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	if (phase<duty) output=-1.;
	if (phase>duty) output=1.;
	return(output);
}

double maxiOsc::phasor(double frequency, double startphase, double endphase) {
    //This is a phasor that takes a value for the start and end of the ramp. 
	output=phase;
	if (phase<startphase) {
		phase=startphase;
	}
	if ( phase >= endphase ) phase = startphase;
	phase += ((endphase-startphase)/(maxiSettings::sampleRate/(frequency)));
	return(output);
}


double maxiOsc::saw(double frequency) {
	//Sawtooth generator. This is like a phasor but goes between -1 and 1
	output=phase;
	if ( phase >= 1.0 ) phase -= 2.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	return(output);
	
}


double maxiOsc::rect(double frequency, double duty) {

    return (output);
}

double maxiOsc::triangle(double frequency) {
    //This is a triangle wave.
	if ( phase >= 1.0 ) phase -= 1.0;
	phase += (1./(maxiSettings::sampleRate/(frequency)));
	if (phase <= 0.5 ) {
		output =(phase - 0.25) * 4;
	} else {
		output =((1.0-phase) - 0.25) * 4;
	}
	return(output);
	
} 


//I particularly like these. cutoff between 0 and 1
double maxiFilter::lopass(double input, double cutoff) {
	output=outputs[0] + cutoff*(input-outputs[0]);
	outputs[0]=output;
	return(output);
}

//as above
double maxiFilter::hipass(double input, double cutoff) {
	output=input-(outputs[0] + cutoff*(input-outputs[0]));
	outputs[0]=output;
	return(output);
}
//awesome. cuttof is freq in hz. res is between 1 and whatever. Watch out!
double maxiFilter::lores(double input,double cutoff1, double resonance) {
	cutoff=cutoff1;
	if (cutoff<10) cutoff=10;
	if (cutoff>(maxiSettings::sampleRate)) cutoff=(maxiSettings::sampleRate);
	if (resonance<1.) resonance = 1.;
	z=cos(TWOPI*cutoff/maxiSettings::sampleRate);
	c=2-2*z;
	double r=(sqrt(2.0)*sqrt(-pow((z-1.0),3.0))+resonance*(z-1))/(resonance*(z-1));
	x=x+(input-y)*c;
	y=y+x;
	x=x*r;
	output=y;
	return(output);
}

//working hires filter
double maxiFilter::hires(double input,double cutoff1, double resonance) {
	cutoff=cutoff1;
	if (cutoff<10) cutoff=10;
	if (cutoff>(maxiSettings::sampleRate)) cutoff=(maxiSettings::sampleRate);
	if (resonance<1.) resonance = 1.;
	z=cos(TWOPI*cutoff/maxiSettings::sampleRate);
	c=2-2*z;
	double r=(sqrt(2.0)*sqrt(-pow((z-1.0),3.0))+resonance*(z-1))/(resonance*(z-1));
	x=x+(input-y)*c;
	y=y+x;
	x=x*r;
	output=input-y;
	return(output);
}

//This works a bit. Needs attention.
double maxiFilter::bandpass(double input,double cutoff1, double resonance) {
	cutoff=cutoff1;
	if (cutoff>(maxiSettings::sampleRate*0.5)) cutoff=(maxiSettings::sampleRate*0.5);
	if (resonance>=1.) resonance=0.999999;
	z=cos(TWOPI*cutoff/maxiSettings::sampleRate);
	inputs[0] = (1-resonance)*(sqrt(resonance*(resonance-4.0*pow(z,2.0)+2.0)+1));
	inputs[1] = 2*z*resonance;
	inputs[2] = pow((resonance*-1),2);
	
	output=inputs[0]*input+inputs[1]*outputs[1]+inputs[2]*outputs[2];
	outputs[2]=outputs[1];
	outputs[1]=output;
	return(output);
}
